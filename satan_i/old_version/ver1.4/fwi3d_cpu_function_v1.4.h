void read_shotrec(void);
void read_trawave(void);
void read_waveform(void);
void init_eh_field_3d(void);
void true_model(void);
void init_model(void);
void media_coeff_3d(void);
void init_eh_mur_3d(void);
void init_FILE(int isource);
void init_FILE2(int isource,int iter);
void init_FILE3(int iter);
void close_FILE(void);
void close_FILE2(void);
void close_FILE3(void);
void e_field(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void read_source_3d(double *EX_r,double *signalX_r,int isource,int step);
void h_field(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void e_field4(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void e_field42(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void h_field4(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void h_field42(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void output(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ, \
        FILE **ofe1,FILE **ofe2,FILE **ofe3,FILE **ofh1,FILE **ofh2,FILE **ofh3,    \
        int step);
void checking_omp(void);
void init_gradient(void);
void read_Eobs(int isource);
void set_zero_eh(void);
void e_field4_bp(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void h_field4_bp(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void read_backwave_3d(double *EX_r,double *delEx_r,int step,int irec);
void e_field_cpml(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void h_field_cpml(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void e_field_cpml42(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void h_field_cpml42(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void e_field_cpml42bp(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
void h_field_cpml42bp(double *EX, double *EY, double *EZ, double *HX, double *HY, double *HZ);
int time_check();
int fmax_check();
int maxin3(double ddx,double ddy,double ddz);
void start_fdtd();
void laplace_fft(int);
void convolution_GJ_to_E(double _Complex *GT,double *JT,double _Complex *ET,int itotal,int isource, int irec);
void output_to_rec(double _Complex *ET,int itotal,int irec,int isource);
void copytoEcal(double *EX,double *EY,double *EZ,int step);
void copytoEcal_b(double *EX,double *EY,double *EZ,int step,int idir, int irec,FILE **ofe1,FILE **ofe2,FILE **ofe3);
void update_para(int iter);
void update_para2(int iter);
void efld_dip(int isource, int irec, int N);
void efld_fic(int isource, int irec, int N);
void laplaceToFreq_back(int irec,int idir);
void laplaceToFreq(int isource);
void laplaceToFreq_2(int isource);
void laplaceToFreq_3();
void residualE(int iter);
void conv_GdelE();
void calc_gamma();
void init_iterate();
void sensitivity();
void output_backwave(int irec,int idir);
void output_fwdwave(int isource);
void banner1(int idir,int irec);
void backpropagation(int idir,int irec, int step);
void fwdpropagation(int isource, int step);
void init();
void calc_phi();
void media_coeff_sig_tmp();
void calc_alpha(int isource);
void show_error(int iter);
